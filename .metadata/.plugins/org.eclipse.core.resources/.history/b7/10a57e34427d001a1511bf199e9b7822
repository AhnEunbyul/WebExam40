package sample.model.port;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import sample.util.DBManager;


public class portDAO {
	Connection conn = null;
	PreparedStatement pstmt = null;
	ResultSet rs = null;
	
	private portDAO() {}
	private static portDAO instance = new portDAO();
	
	public static portDAO getInstance() {
		return instance;
	}
	
	// 전체 자료 검색
	public List<portVO> port_web_List() {
		String sql = "SELECT * FROM PORT ORDER BY IDX DESC";
		
		List<portVO> list = new ArrayList<portVO>();
			
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
				
			portVO vo = null;
				
			while(rs.next()) {
				vo = new portVO();
					
				vo.setIdx(rs.getInt("idx"));
				vo.setMgn_name(rs.getString("mgn_name"));
				vo.setSubject(rs.getString("subject"));
				vo.setContents(rs.getString("contents"));
				vo.setRegdate(rs.getString("regdate"));
				vo.setReadcnt(rs.getInt("readcnt"));
				vo.setFilename(rs.getString("filename"));
					
				list.add(vo);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				DBManager.close(conn, pstmt, rs);
			} catch (Exception e2) {}
		}
		return list;
	}
	
	// 글 등록 메소드
	public int port_web_write(portVO vo) {
		
		String sql = "INSERT INTO PORT(IDX,MGN_NAME,SUBJECT,CONTENTS,REGDATE,READCNT,FILENAME,PWD)"
				+ " VALUES(PORT_SEQ_IDX.NEXTVAL,?,?,?,SYSDATE,?,?,?)";
		
		int row = 0;
			
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, vo.getMgn_name());
			pstmt.setString(2, vo.getSubject());
			pstmt.setString(3, vo.getContents());
			pstmt.setInt(4, vo.getReadcnt());
			pstmt.setString(5, vo.getFilename());
			pstmt.setString(6, vo.getPwd());
				
			row = pstmt.executeUpdate();
				
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				DBManager.close(conn, pstmt);
			} catch (Exception e2) {}
		}
		
		return row;
	}
	
	// idx에 맞는 글 가져오기
	public portVO portSelect(int idx) {
		
		String sql = "SELECT * FROM PORT WHERE IDX=?";
		
		portVO vo = new portVO();
		
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,idx);
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				
				vo.setIdx(rs.getInt("idx"));
				vo.setMgn_name(rs.getString("mgn_name"));
				vo.setSubject(rs.getString("subject"));
				vo.setContents(rs.getString("contents"));
				vo.setRegdate(rs.getString("regdate"));
				vo.setReadcnt(rs.getInt("readcnt"));
				vo.setFilename(rs.getString("filename"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				DBManager.close(conn, pstmt, rs);
			} catch (Exception e2) {}
		}
		return vo;
	}
	
	// 조회수 증가 시키는 메소드
	public void portCntUp(int idx) {
		String sql = "UPDATE PORT SET READCNT = READCNT+1 WHERE IDX=?";

		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, idx);
			pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				DBManager.close(conn, pstmt);
			} catch (Exception e2) {
			}
		}
	}
	
	// 글 수정하는 메소드
	public int portModify(portVO vo) {
		String sql = "UPDATE PORT SET SUBJECT=?, CONTENTS=?, FILENAME=? WHERE IDX=?";
		
		int row = 0;
		
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, vo.getSubject());
			pstmt.setString(2, vo.getContents());
			pstmt.setString(3, vo.getFilename());
			pstmt.setInt(4, vo.getIdx());
			
			row = pstmt.executeUpdate();
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				DBManager.close(conn, pstmt);
			} catch (Exception e2) {}
		}
		return row;
	}
	
	// idx가 일치하고 pwd가 맞으면 삭제되는 메소드
	public int portDelete(int idx, String pwd) {
		String sql = "DELETE FROM PORT WHERE IDX=? AND PWD=?";

		int row = 0;

		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, idx);
			pstmt.setString(2, pwd);

			row = pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				DBManager.close(conn, pstmt, rs);
			} catch (Exception e2) {}
		}
		return row;
	}
	
	// 게시글 전체 카운트 갯수 (갯수-int)
	public int portCount() {
		String sql = "SELECT COUNT(*) AS COUNTER FROM PORT";
		
		int cnt = 0;
		
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				cnt = rs.getInt("counter");
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				DBManager.close(conn, pstmt, rs);
			} catch (Exception e2) {}
		}
		return cnt;
	}
	
	// 게시글 중 조건에 맞는 게시글 전체 카운트 갯수 (갯수-int)
	public int portCount(String s_query) {
		String sql = "SELECT COUNT(*) AS COUNTER FROM PORT WHERE " + s_query;

		int cnt = 0;

		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				cnt = rs.getInt("counter");
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				DBManager.close(conn, pstmt, rs);
			} catch (Exception e2) {}
		}
		return cnt;
	}
	
	// 게시글(시작,끝) 불러오기
	public List<portVO> portList(int pagestart, int endpage) {
		String sql = "SELECT X.* FROM (SELECT ROWNUM RNUM, A.* FROM ("
				+ "SELECT * FROM PORT ORDER BY REGDATE DESC) A "
				+ "WHERE ROWNUM <= ?) X WHERE X.RNUM > ?";
		
		List<portVO> list = new ArrayList<portVO>();
		
		try {
			conn = DBManager.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, endpage);
			pstmt.setInt(2, pagestart);
			
			rs = pstmt.executeQuery();
			
			portVO vo = null;
			
			while(rs.next()) {
				vo = new portVO();
				
				vo.setIdx(rs.getInt("idx"));
				vo.setMgn_name(rs.getString("mgn_name"));
				vo.setSubject(rs.getString("subject"));
				vo.setContents(rs.getString("contents"));
				vo.setRegdate(rs.getString("regdate"));
				vo.setReadcnt(rs.getInt("readcnt"));
				vo.setFilename(rs.getString("filename"));
				vo.setPwd(rs.getString("pwd"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				
			} catch (Exception e2) {}
		}
	}
	
}
